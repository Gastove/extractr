
package com.meanrecipes.extractr

import scala.io.Source
import java.io.File
import org.htmlcleaner.HtmlCleaner
import collection.JavaConversions._
import java.net.URL

/*
Right. So this thing is going to take incoming URLs and spit out recipe objects. 

Resources:
http://alvinalexander.com/scala/scala-html-parsing-htmlcleaner-parser
http://en.wikipedia.org/wiki/Document_Object_Model
http://myadventuresincoding.wordpress.com/2011/09/29/scala-hello-world-rest-api-with-scalatra-and-simple-build-tool/

TODO:
# Start with locally saved files, but switch to URLs real soon.
*/

object Extracter {
  // Utility wrapper for testing; comment or delete before prime-time. 
  def main(args: Array[String]) = {
    val fpath = "./learning_data/raw_html/orangette-individual_post.html"
    val wut = new DigestHTML(fpath)
  }

  def loadAndParseFile(filePath: String) = {
    // This function is janky, and should be moved elsewhere at somepoint. For now, it's useful to have it here. 
    // This opens a blogspot url and returns everything tagged as either "post" or "post-body". 
    // In the future... this will need to be improved.
    val turl = "http://orangette.blogspot.com/2013/05/im-feeling-daring.html"
    val cleaner = new HtmlCleaner
    val rootNode = cleaner.clean(new URL(turl).openStream)
    val elements = rootNode.getElementsByName("div", true)
    elements.map{ elem =>
      elem.getAttributeByName("class") match {
        case "post" | "post-body" => elem.getText.toString.replaceAll("&nbsp;", "")
        case _ => 
      }
    }.toList

  }


}
